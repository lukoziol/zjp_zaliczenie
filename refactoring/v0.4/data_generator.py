"""Moduł zawiera klasę generatora danych dla przypadków testowych zadania kdtree

"""
import random


class Generator:
    """Klasa odpowiadająca za przetrzymywanie i generowanie przypadków testowych
    dla rozwiązywania problemów związanych z zadaniem kdtrees
    Klasa trzyma 2 tablice oraz wskaźnik aktualnie używanego wpisu danej tablicy
    Pozwala na podstawowe operacje na tych elementach poprzez zbiór prostych metod
    Wrażliwe zmienne wewnętrzne są chronione poprzez deklarację getterów bez setterów

    """
    def __init__(self):
        """Inicjalizacja pustego generatora, zawiera
        wszystkie ręcznie stworzone zestawy testów

        """
        self.__range_index = 0
        self.__set_index = 0
        self.__ranges = [
            [(0, 0), (4, 3)],
            [(1, 0), (2, 4)],
            [(1, 1), (2, 2)],
            [(0, 0), (4, 0)],
            [(1, 1), (1, 1)],
            [(0, 1), (0, 1)],
            [(4, -15), (15, -4)],
            [(4, -14), (14, -4)],
            [(4, -12), (12, -4)],
            [(-20, -16), (12, 5)],
            [(42, -44), (44, -42)],
            [(44, -46), (46, -44)],
            [(46, -48), (48, -46)],
            [(48, -50), (50, -48)],
            [(44, -50), (46, 50)],
            [(44, -50), (46, 47)],
            [(-75, 0), (74, 2)],
            ]
        self.__sets = [
            [(0, 3), (1, 3), (2, 3), (3, 3), (0, 2), (3, 2), (0, 1), (3, 1), (0, 0), (1, 0), (2, 0),
             (3, 0)],
            [(0, 3.3), (1.1, 3.2), (2.1, 3.1), (3.1, 3.0), (0.1, 2.0), (3.2, 1.9), (0.2, 1),
             (3.3, 1.1), (0.3, -0.3), (1.0, -0.2), (2.0, -0.1), (3.0, 0.0)],
            [(0, 2), (2, 1), (1, -1)],
            [(0, 2), (2, 1), (1, -1), (-1, 5)],
            [(0, 2), (2, 1), (1, -1), (-1, 0), (-2, 4), (4, 3), (3, -3)],
            [(0, 2), (2, 1), (1, -1), (-1, 0), (-2, 4), (4, 3), (3, -3), (-3, -2), (-4, 6), (6, 5),
             (5, -5), (-5, -4), (-6, 8), (8, 7), (7, -7)],
            [(0, 2), (2, 1), (1, -1), (-1, 0), (-2, 4), (4, 3), (3, -3), (-3, -2), (-4, 6), (6, 5),
             (5, -5), (-5, -4), (-6, 8), (8, 7), (7, -7), (-7, -6), (-8, 10), (10, 9), (9, -9),
             (-9, -8), (-10, 12), (12, 11), (11, -11), (-11, -10), (-12, 14), (14, 13), (13, -13),
             (-13, -12), (-14, 16), (16, 15), (15, -15)],
            [(0, 2), (2, 1), (1, -1), (-1, 0), (-2, 4), (4, 3), (3, -3), (-3, -2), (-4, 6), (6, 5),
             (5, -5), (-5, -4), (-6, 8), (8, 7), (7, -7), (-7, -6), (-8, 10), (10, 9), (9, -9),
             (-9, -8), (-10, 12), (12, 11), (11, -11), (-11, -10), (-12, 14), (14, 13), (13, -13),
             (-13, -12), (-14, 16), (16, 15), (15, -15), (-15, -14), (-16, 18), (18, 17), (17, -17),
             (-17, -16), (-18, 20), (20, 19), (19, -19), (-19, -18), (-20, 22), (22, 21), (21, -21),
             (-21, -20), (-22, 24), (24, 23), (23, -23), (-23, -22), (-24, 26), (26, 25), (25, -25),
             (-25, -24), (-26, 28), (28, 27), (27, -27), (-27, -26), (-28, 30), (30, 29), (29, -29),
             (-29, -28), (-30, 32), (32, 31), (31, -31)],
            [(0, 2), (2, 1), (1, -1), (-1, 0), (-2, 4), (4, 3), (3, -3), (-3, -2), (-4, 6), (6, 5),
             (5, -5), (-5, -4), (-6, 8), (8, 7), (7, -7), (-7, -6), (-8, 10), (10, 9), (9, -9),
             (-9, -8), (-10, 12), (12, 11), (11, -11), (-11, -10), (-12, 14), (14, 13), (13, -13),
             (-13, -12), (-14, 16), (16, 15), (15, -15), (-15, -14), (-16, 18), (18, 17), (17, -17),
             (-17, -16), (-18, 20), (20, 19), (19, -19), (-19, -18), (-20, 22), (22, 21), (21, -21),
             (-21, -20), (-22, 24), (24, 23), (23, -23), (-23, -22), (-24, 26), (26, 25), (25, -25),
             (-25, -24), (-26, 28), (28, 27), (27, -27), (-27, -26), (-28, 30), (30, 29), (29, -29),
             (-29, -28), (-30, 32), (32, 31), (31, -31), (-31, -30), (-32, 34), (34, 33), (33, -33),
             (-33, -32), (-34, 36), (36, 35), (35, -35), (-35, -34), (-36, 38), (38, 37), (37, -37),
             (-37, -36), (-38, 40), (40, 39), (39, -39), (-39, -38), (-40, 42), (42, 41), (41, -41),
             (-41, -40), (-42, 44), (44, 43), (43, -43), (-43, -42), (-44, 46), (46, 45), (45, -45),
             (-45, -44), (-46, 48), (48, 47), (47, -47), (-47, -46), (-48, 50), (50, 49), (49, -49),
             (-49, -48), (-50, 52), (52, 51), (51, -51), (-51, -50), (-52, 54), (54, 53), (53, -53),
             (-53, -52), (-54, 56), (56, 55), (55, -55), (-55, -54), (-56, 58), (58, 57), (57, -57),
             (-57, -56), (-58, 60), (60, 59), (59, -59), (-59, -58), (-60, 62), (62, 61), (61, -61),
             (-61, -60), (-62, 64), (64, 63), (63, -63)],
            [(0, 2), (2, 1), (1, -1), (-1, 0), (-2, 4), (4, 3), (3, -3), (-3, -2), (-4, 6), (6, 5),
             (5, -5), (-5, -4), (-6, 8), (8, 7), (7, -7), (-7, -6), (-8, 10), (10, 9), (9, -9),
             (-9, -8), (-10, 12), (12, 11), (11, -11), (-11, -10), (-12, 14), (14, 13), (13, -13),
             (-13, -12), (-14, 16), (16, 15), (15, -15), (-15, -14), (-16, 18), (18, 17), (17, -17),
             (-17, -16), (-18, 20), (20, 19), (19, -19), (-19, -18), (-20, 22), (22, 21), (21, -21),
             (-21, -20), (-22, 24), (24, 23), (23, -23), (-23, -22), (-24, 26), (26, 25), (25, -25),
             (-25, -24), (-26, 28), (28, 27), (27, -27), (-27, -26), (-28, 30), (30, 29), (29, -29),
             (-29, -28), (-30, 32), (32, 31), (31, -31), (-31, -30), (-32, 34), (34, 33), (33, -33),
             (-33, -32), (-34, 36), (36, 1.5), (35, -35), (-35, -34), (-36, 38), (38, 37),
             (37, -37), (-37, -36), (-38, 40), (40, 39), (39, -39), (-39, -38), (-40, 42), (42, 41),
             (41, -41), (-41, -40), (-42, 44), (44, 1.6), (43, -43), (-43, -42), (-44, 46),
             (46, 45), (45, -45), (-45, -44), (-46, 48), (48, 47), (47, -47), (-47, -46), (-48, 50),
             (50, 49), (49, -49), (-49, -48), (-50, 52), (52, 51), (51, -51), (-51, -50), (-52, 54),
             (54, 53), (53, -53), (-53, -52), (-54, 56), (56, 55), (55, -55), (-55, -54), (-56, 58),
             (58, 57), (57, -57), (-57, -56), (-58, 60), (60, 59), (59, -59), (-59, -58), (-60, 62),
             (62, 61), (61, -61), (-61, -60), (-62, 64), (64, 63), (63, -63)],
            [(0, 2), (2, 1), (1, -1), (-1, 0), (-2, 4), (4, 3), (3, -3), (-3, -2), (-4, 6), (6, 5),
             (5, -5), (-5, -4), (-6, 8), (8, 7), (7, -7), (-7, -6), (-8, 10), (10, 9), (9, -9),
             (-9, -8), (-10, 12), (12, 11), (11, -11), (-11, -10), (-12, 14), (14, 13), (13, -13),
             (-13, -12), (-14, 16), (16, 15), (15, -15), (-15, -14), (-16, 18), (18, 17), (17, -17),
             (-17, -16), (-18, 20), (20, 19), (19, -19), (-19, -18), (-20, 22), (22, 21), (21, -21),
             (-21, -20), (-22, 24), (24, 23), (23, -23), (-23, -22), (-24, 26), (26, 25), (25, -25),
             (-25, -24), (-26, 28), (28, 27), (27, -27), (-27, -26), (-28, 30), (30, 29), (29, -29),
             (-29, -28), (-30, 32), (32, 31), (31, -31), (-31, -30), (-32, 34), (34, 33), (33, -33),
             (-33, -32), (-34, 36), (0, 35), (35, -35), (-35, -34), (-36, 38), (38, 37), (37, -37),
             (-37, -36), (-38, 40), (40, 39), (39, -39), (-39, -38), (-40, 42), (42, 41), (41, -41),
             (-41, -40), (-42, 44), (44, 43), (43, -43), (-43, -42), (-44, 46), (46, 45), (45, -45),
             (-45, -44), (-46, 48), (48, 47), (47, -47), (-47, -46), (-48, 50), (50, 49), (49, -49),
             (-49, -48), (-50, 52), (52, 51), (51, -51), (-51, -50), (-52, 54), (54, 53), (53, -53),
             (-53, -52), (-54, 56), (56, 55), (55, -55), (-55, -54), (-56, 58), (58, 57), (57, -57),
             (-57, -56), (-58, 60), (60, 59), (59, -59), (-59, -58), (-60, 62), (62, 61), (61, -61),
             (-61, -60), (-62, 64), (64, 63), (63, -63)],
            [(0, 2), (2, 1), (1, -1), (-1, 0), (-2, 4), (4, 3), (3, -3), (-3, -2), (-4, 6), (6, 5),
             (5, -5), (-5, -4), (-6, 8), (8, 7), (7, -7), (-7, -6), (-8, 10), (10, 9), (9, -9),
             (-9, -8), (-10, 12), (12, 11), (11, -11), (-11, -10), (-12, 14), (14, 13), (13, -13),
             (-13, -12), (-14, 16), (16, 15), (15, -15), (-15, -14), (-16, 18), (18, 17), (17, -17),
             (-17, -16), (-18, 20), (20, 19), (19, -19), (-19, -18), (-20, 22), (22, 21), (21, -21),
             (-21, -20), (-22, 24), (24, 23), (23, -23), (-23, -22), (-24, 26), (26, 25), (25, -25),
             (-25, -24), (-26, 28), (28, 27), (27, -27), (-27, -26), (-28, 30), (30, 29), (29, -29),
             (-29, -28), (-30, 32), (32, 31), (31, -31), (-31, -30), (-32, 34), (34, 33), (33, -33),
             (-33, -32), (-34, 36), (36, 35), (35, -35), (-35, -34), (-36, 38), (38, 37), (37, -37),
             (-37, -36), (-38, 40), (40, 39), (39, -39), (-39, -38), (-40, 42), (42, 41), (41, -41),
             (-41, -40), (-42, 44), (44, 43), (43, -43), (-43, -42), (-44, 46), (46, 45), (45, -45),
             (-45, -44), (-46, 48), (48, 47), (47, -47), (-47, -46), (-48, 50), (50, 49), (49, -49),
             (-49, -48), (-50, 52), (52, 51), (51, -51), (-51, -50), (-52, 54), (54, 53), (53, -53),
             (-53, -52), (-54, 56), (56, 55), (55, -55), (-55, -54), (-56, 58), (58, 57), (57, -57),
             (-57, -56), (-58, 60), (60, 59), (59, -59), (-59, -58), (-60, 62), (62, 61), (61, -61),
             (-61, -60), (-62, 64), (64, 63), (63, -63), (-63, -62)],
            [(-33, -16), (-32, -19), (-31, -17), (-30, -18)],
            [(-33, -16), (-32, -19), (-31, -17), (-30, -18), (-29, 16), (-28, 19), (-27, 17),
             (-26, 18)],
            [(-33, -16), (-32, -19), (-31, -17), (-30, -18), (-29, 16), (-28, 19), (-27, 17),
             (-26, 18), (33, 12), (32, 15), (31, 13), (30, 14), (29, -12), (28, -15), (27, -13),
             (26, -14)],
            [(-33, -19), (33, -18), (32, 19), (-32, 18), (-31, -17), (31, -16), (30, 17)],
            [(-33, -19), (33, -18), (32, 19), (-32, 18), (-31, -17), (31, -16), (30, 17), (-30, 16),
             (-29, -15), (29, -14), (28, 15), (-28, 14), (-27, -13), (27, -12), (26, 13), (-26, 12),
             (-25, -11), (25, -10), (24, 11), (-24, 10), (-23, -9), (23, -8), (22, 9), (-22, 8),
             (-21, -7), (21, -6), (20, 7), (-20, 6), (-19, -5), (19, -4), (18, 5), (-18, 4),
             (-17, -3), (17, -2), (16, 3), (-16, 2), (-15, -1), (15, 0), (14, 1)],
            [(-45, -31), (45, -30), (44, 31), (-44, 30), (-43, -29), (43, -28), (42, 29), (-42, 28),
             (-41, -27), (41, -26), (40, 27), (-40, 26), (-39, -25), (39, -24), (38, 25), (-38, 24),
             (-37, -23), (37, -22), (36, 23), (-36, 22), (-35, -21), (35, -20), (34, 21), (-34, 20),
             (-33, -19), (33, -18), (32, 19), (-32, 18), (-31, -17), (31, -16), (30, 17), (-30, 16),
             (-29, -15), (29, -14), (28, 15), (-28, 14), (-27, -13), (27, -12), (26, 13), (-26, 12),
             (-25, -11), (25, -10), (24, 11), (-24, 10), (-23, -9), (23, -8), (22, 9), (-22, 8),
             (-21, -7), (21, -6), (20, 7), (-20, 6), (-19, -5), (19, -4), (18, 5), (-18, 4),
             (-17, -3), (17, -2), (16, 3), (-16, 2), (-15, -1), (15, 0), (14, 1)],
            [(-57, -43), (57, -42), (56, 43), (-56, 42), (-55, -41), (55, -40), (54, 41), (-54, 40),
             (-53, -39), (53, -38), (52, 39), (-52, 38), (-51, -37), (51, -36), (50, 37), (-50, 36),
             (-49, -35), (49, -34), (48, 35), (-48, 34), (-47, -33), (47, -32), (46, 33), (-46, 32),
             (-45, -31), (45, -30), (44, 31), (-44, 30), (-43, -29), (43, -28), (42, 29), (-42, 28),
             (-41, -27), (41, -26), (40, 27), (-40, 26), (-39, -25), (39, -24), (38, 25), (-38, 24),
             (-37, -23), (37, -22), (36, 23), (-36, 22), (-35, -21), (35, -20), (34, 21), (-34, 20),
             (-33, -19), (33, -18), (32, 19), (-32, 18), (-31, -17), (31, -16), (30, 17), (-30, 16),
             (-29, -15), (29, -14), (28, 15), (-28, 14), (-27, -13), (27, -12), (26, 13), (-26, 12),
             (-25, -11), (25, -10), (24, 11), (-24, 10), (-23, -9), (23, -8), (22, 9), (-22, 8),
             (-21, -7), (21, -6), (20, 7), (-20, 6), (-19, -5), (19, -4), (18, 5), (-18, 4),
             (-17, -3), (17, -2), (16, 3), (-16, 2), (-15, -1), (15, 0), (14, 1)],
            [(-10, 5), (-8, 4), (-6, 3), (-4, 2), (-2, 1), (0, 0), (2, -1), (4, -2), (6, -3),
             (8, -4), (10, -5), (-9, 6), (-7, 7), (-5, 8), (-3, 9), (-1, 10), (1, -10), (3, -9),
             (5, -8), (7, -7), (9, -6)],
            [(-10, 10), (-9, -10), (-8, 9), (-7, -9), (-6, 8), (-5, -8), (-4, 7), (-3, -7), (-2, 6),
             (-1, -6), (0, 5), (1, -5), (2, 4), (3, -4), (4, 3), (5, -3), (6, 2), (7, -2), (8, 1),
             (9, -1), (10, 0)],
            [(-10, 10), (-9, -10), (-8, 9), (-7, -9), (-6, 8), (-5, -8), (-4, 7), (-3, -7), (-2, 6),
             (-1, -6), (0, 5), (1, -5), (2, 4), (3, -4), (4, 3), (5, -3), (6, 2), (7, -2), (8, 1),
             (9, -1), (10, 0), (12, 12), (14, 14), (16, 16), (13, -13), (15, -15), (17, -17),
             (-12, -12), (-14, -14), (-16, -16), (-13, 13), (-15, 15), (-17, 17)],
            ]

    @property
    def point_set(self):
        """Pobranie aktualnego zbioru punktów
        Ogranicza dostęp do prywatnych zmiennych

        :return: aktualny zbiór punktów
        """
        return self.__sets[self.__set_index]

    @property
    def range(self):
        """Pobranie aktualnego obszaru przeszukiwania
        Ogranicza dostęp do prywatnych zmiennych

        :return: aktualny obszar przeszukiwania
        """
        return self.__ranges[self.__range_index]

    @property
    def range_index(self):
        """Zwraca numer używanego obszaru przeszukiwania

        :return: indeks obszaru przeszukiwania
        """
        return self.__range_index

    @property
    def point_set_index(self):
        """Zwraca numer uzywanego zestawu punktów

        :return: indeks zbioru punktów
        """
        return self.__set_index

    @property
    def range_count(self):
        """Zwraca liczbę zapamiętanych obszarów przeszukiwania

        :return: ilość dostępnych obszarów przeszukiwania
        """
        return len(self.__ranges)

    @property
    def point_set_count(self):
        """Zwraca liczbę zapamiętanych zestawów punktów

        :return: ilość dostępnych zestawów punktów
        """
        return len(self.__sets)

    def next_range(self):
        """Przejście do kolejnego obszaru przeszukiwania

        """
        self.jump_range(1)

    def next_set(self):
        """Przejście do kolejnego zbioru punktów

        """
        self.jump_set(1)

    def prev_range(self):
        """Przejście do poprzedniego obszaru przeszukiwania

        """
        self.jump_range(-1)

    def prev_set(self):
        """Przejście do poprzedniego zbioru punktów

        """
        self.jump_set(-1)

    def jump_range(self, step):
        """Skok do następnego obszaru przeszukiwania

        :param step: długość skoku
        """
        self.__range_index = (self.__range_index + step) % len(self.__ranges)

    def jump_set(self, step):
        """Skok do następnego zbioru punktów

        :param step: długość skoku
        """
        self.__set_index = (self.__set_index + step) % len(self.__sets)

    def add_range(self, user_range):
        """Dodawanie nowego obszaru przeszukiwania
        Automatycznie konwertuje go na prawidłowy format (bottom_left, top_right)
        Dodany obszar przeszukiwania automatycznie staje się aktualnym obszarem roboczym

        :param user_range: lista 2 punktów [(x0, y0), (x1, y1)]
        """
        self.__ranges.append((
            (min(user_range[0][0], user_range[1][0]), min(user_range[0][1], user_range[1][1])),
            (max(user_range[0][0], user_range[1][0]), max(user_range[0][1], user_range[1][1]))))
        self.__range_index = len(self.__ranges) - 1

    def add_point_set(self, user_set):
        """Dodawanie nowego zbioru punktów

        :param user_set: lista punktów zbioru [(x0, y0) ...]
        """
        self.__sets.append(user_set)

    def generate_point_set(self, point_count, bounds, div=10, in_place=False, index=-1, empty=0):
        """Generowanie nowego zbioru punktów na podstawie zadanych parametrów
        Wszystkie punkty mają różne współrzędne X i Y

        :param point_count: ile punktów wygenerować
        :param bounds: max zakres wartości X i Y - symetryczny względem 0
        :param div: dzielnik rozdzielczości współrzędnych
        :param in_place: flaga czy nadpisac istniejący zbiór
        :param index: indeks zbioru do nadpisania (jeśli in_place == True)
                      jeśli index == -1 to nadpisujemy aktualnie oglądany zbiór
        :param empty: rozmiar symetrycznej powierzchni (względem 0,0) bez punktów
        """
        new_set = []
        x_values = []
        y_values = []
        # tworzenie listy potencjalnych wartości dla X i Y
        # rozdzielczość 1/divider pomiędzy <-max;max)
        # uwzględnia pustą przestrzeń okreslona przez parametr 'empty'
        bounds = (bounds[0] * div, bounds[1] * div)
        empty *= div
        x_values.extend(range(-bounds[0], -empty, 1))
        x_values.extend(range(empty, bounds[0], 1))
        y_values.extend(range(-bounds[1], -empty, 1))
        y_values.extend(range(empty, bounds[1], 1))
        # sprawdzenie czy liczba dostępnych współrzędnych
        # nie jest zbyt mała
        if len(y_values) < point_count or len(x_values) < point_count:
            raise Exception('Error creating new point set - allowed range too small!'
                            '\nfree x: {:d}'
                            '\nfree y: {:d}'
                            '\nneeded: {:d}'.format(len(x_values), len(y_values), point_count))
        # dodawanie nowych punktów do zbioru
        while len(new_set) < point_count:
            # wybranie losowegom elementu tablicy
            # z dostępnymi współrzednymi x i y
            x_index = random.randrange(0, len(x_values))
            y_index = random.randrange(0, len(y_values))
            # utworzneie i dodanie punktu
            point = (x_values[x_index] / div, y_values[y_index] / div)
            new_set.append(point)
            # usunięcie współrzędnych
            del x_values[x_index]
            del y_values[y_index]
        # zapisanie nowego zbioru punktów w tablicy
        if in_place:
            if index == -1:
                self.__sets[self.__set_index] = new_set
            else:
                self.__sets[index] = new_set
        else:
            self.__sets.append(new_set)
